// 코틀린 강좌 # 4 - 타입추론과 함수

// 타입추론 ( type inference)
// 타입추론은 변수나 함수들을 선언할 때나 연산이 이루어질 때 자료형을 코드에 명시하지 않아도 코틀린이 자동으로 자료형을 추론해주는 기능
// ex) val stringValue = "준자열을 할당해 볼까요?"
// ex) val stringValue: String = "문자열을 할당해 볼까요?"  -->>> :Sting 이라는 자료형을 생략 했었다
// ex) var intArr = arrayOf(1,2,3,4,5) 배열을 만들 때도
// ex) var intArr: Array<Int> = arrayOf(1,2,3,4,5) --->> : Array<Int> 라는 자료형을 생략 했었다

// ---> 이는 변수가 선언될 때 할당된 " 값의 형태"로 해당 변수가 어떤 자료형을 가지는지 "추론"이 가능하기 떄문이다
// 기본 자료형들도 선언시 값을 할당만 해준다면 대부분 자료형을 명시할 필요가 없는다.
// 자료형 없이 값을 할당한다면 어떤 자료형으로 지정될까??
// 일반 정수형 리터럴을 할당하면 Int, L이 붙은 정수형 리터럴은 Long, 일반 실수형 리터럴은 Double, f가 붙은 실수형 리터럴은 Float형으로 추론된다.

/*
fun main(){
    var a = 1234     // a = Int형 변수로 지정
    var b = 1234L    // b = Long형 변수로 지정
    var c = 12.45    // c = Double형 변수로 지정
    var d = 12.45f   // f = Float형 변수로 지정

    var e = 0xABCD
    var f = 0b0101010          // 16진수와 2진수는 Int형으로 추론된다.

    var g = true
    var h = 'c'                // Boolean과 Char역시 자료형 없이 추론이 가능하다.
}
*/
// 따라서 반드시 특정한 자료형으로 지정해야하는 상황이 아니라면 대부분은 코틀린의 타입추론 기능을 이용하여 코드량을 줄일 수 있다.



// 함수 ( function )
// 함수는 특정한 동작을 하거나 원하는 결과값을 연산하는데 사용되는 기능
// ex) 우리가 코드를 짜고 있는 main() 이나 코드 내에서 사용하는 println("") 같은것도 모두 함수다.

// 간단하게 3개의 Int 정수를 더하는 함수를 만들어보자
// 코틀린에서 함수는 어디에나 둘 수 있지만 지금은 main함수 바깥에 함수를 만들어 보자
// 변수가 var이나 val로 시작하듯 함수도 function의 줄임말인 fun으로 시작한다.
// 값을 더하는 함수이니 이름은 add로 해보자.
// 괄호를 만들어 함수가 받아야할 Int 정수값 a,b,c를 써준다.
// 다음 괄호를 닫고 a,b,c를 더해서 반환하는 값의 자료형(:Int)을 써준다.  --> 이를 반환형 이라고 한다. 반환값이 없다면 생략해도 상관없다.
// kotlin 에서는 Int끼리 더하면 Int가 나오므로 반환형을 Int로 정해준다.
// 다음은 함수의 내용을 만들기 위해 중괄호를 사용해보자. main함수의 내용을 적은것처럼 중괄호 안에 함수가 해야할 구문을 적는다.
// 여기서는 단순히 a.b.c를 더한 값을 반환하는 목적이므로 return a+b+c라고 기술해준다.
// 함수 안에서 return은 뒤에 오는 값을 반환하는 키워드로 return이 발생한다면 함수의 중간이더라도 값을 반환하고 함수를 종료하게 된다.
// 다음은 이 함수를 실제로 사용해보자
// println안에서 add함수에 5.6.7이라는 숫자를 넣어 동작시키면 add함수의 결과값을 반환받아 println을 통해 화면에 출력된다. -->18이라는 결과값 출력

/*
fun main() {
    println(add(5,6,7))

}

fun add(a: Int, b: Int, c: Int): Int {
    return a + b + c
}
*/

// 그런데 이 함수는 여러가지 일을 하는것이 아닌  a.b.c를 단순히 더해서 반환하는 역할만 한다
// 이럴때는 함수를 좀 더 간단하게 기술할 수 있도록 '단일 표현식 함수(single-expression function)'를 지원한다.
// 방금전에 만든 함수와 같은 기능의 함수를 마치 변수에 결과값을 할당하듯 이렇게 식을 할당하여 만들수 있다. fun add(a:Int, b:Int, c:Int) = a + b + c

fun main() {
    println(add(5,6,7))
}

fun add(a:Int, b:Int, c:Int) = a + b+ c

// 또한 단일 표현식 함수에서는 반환형의 타입추론이 가능하므로 반환형을 생략할 수 있다.
// kotlin에서 함수는 내부적으로 기능을 가진 형태이지만 외부에서 볼때는 파라미터를 넣는다는 점 외에는 자료형이 결정된 변수라는 개념으로 접근하는것이 좋다.
// 그래야 이후에 배울 함수형 언어라는 kotlin의 중요한 특징을 이해하기 쉽다.