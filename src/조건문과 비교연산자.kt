// kotlin 강좌 #5 조건문과 비교연산자

// 조건문의 기본 if 문은 만약 ~ 한다면 이라는 말 그대로 if문에 주어진 값이 '참'이라면 따라오는 구문을 실행하는 기능이다.

// a 라는 변수를 하나 만들어 정수 7 을 넣어보자. 그리고 if를 쓴 뒤에 괄호안에 a와 10을 비교햐는 '조건식'을 넣어보자.
// 그리고 이 조건식이 참인 경우에 실행할 println을 중괄호를 치고 써보자.
// 이때 {중괄호}를 치는 이유는 함수처럼 조건문에서도 실행할 구문이 '여러개'가 될 수 있기 때문인데 하나뿐이라면 중괄호를 생략해도 된다.
// a가 10보다 크다라는 조건이 거짓이기 때문에 실행내용이 뜨지 않는다.

/*
fun main() {
    var a = 7
    if(a > 10) {
        println("a는 10보다 크다")
    }
}
*/
// 하나의 if 문으로 '거짓'인 경우까지 커버할 수 없을까?
// 이럴때는 if 문이 실행되는 구문뒤에 else 를 붙이고 조건이 거짓일 때 실행알 구문을 써주면 된다.
/*
fun main() {
    var a = 7
    if(a > 10) {
        println("a는 10보다 크다")
    } else {
        println("a는 10보다 작거나 같다")
    }
}
*/
// 다시 실행해보면 거짓일 때 표시할 문자열이 나타난다.

// 그럼 조건을 참으로 만들기 위해 a 값을 11로 바꿔보자.
/*
fun main() {
    var a = 11
    if(a > 10) {
        println("a는 10보다 크다")
    } else {
        println("a는 10보다 작거나 같다")
    }
}
*/
// 실행해보면 참인경우에 표시할 문자열이 나타난다.

// 이렇게 if 문은 참과 거짓을 이용하여 프로그램에서 실행할 구문을 나눠주는 역할을 하는데 앞서 봤듯이 참과 거짓의 조건은 "비교연산"을 통해 구할 수 있다.

// 그럼 이 때 사용하는 비교연산자 ( comparison operators ) 에는 어떤것이 있을까???

// 부등호 <(작다), <=(작거나 같다), =(같다), >(크다), >=(크거나 같다), !=(같지 않다)
// 등호 == (같다)  ---> 수학에서와 달리 이퀄을 '두 개' 사용한다.
// --> 이는 우측의 값을 좌측 변수에 할당하는 할당연산자와 혼동을 방지하기 위해서다.
// ex) 할당연산자 a = 7 --->> 7 이라는 값을 a 라는 변수에 넣겠다는 의미
// 자료형이 맞는지 체크하는 is 연산자 , 자료형이 틀린지 체크하는 !is 연산자   ---->>> !(느낌표)가 not을 의미함.
// a is Int (is 연산자 좌측에 변수를 쓰고 우측에는 확인할 자료형을 쓰면 좌측변수가 우측 자료형에 '호환'되는지 여부를 체크하고 형변환까지 한번에 시켜준다.




// 다중조건문( when )  --->> 다른 언어에서 지원하는 switch문을 좀 더 편리하게 바꾼 기능
// if가 참과 거짓만을 비교할 수 있는 반면 when은 하나의 변수를 여러개의 값과 비교할 수 있다는 장점이 있다.
// when문을 유연하게 테스트하기 위해 패러미터를 받아 when에 넣어주는 doWhen함수를 하나 만들어보자. *  fun doWhen(a: Any) {}
// 이 떄, '패러미터 a'는 "Any"라는 자료형을 사용하는데 이는 "어떤 자료형이든 상관없이 호환"되는 kotlin의 최상위 자료형이다.
// 일단 doWhen 함수에 when구문을 만들고 패러미터로 받아온 a를 넣은 후 중괄호 안에 a와 비교할 조건값들을 나열한다. * when(a) { //조건값들 }
// 1(조건값) -> (실행구문)println("정수 입니다")  --> 숫자값이 될 수도 있고 문자열일수도 있다. 또는 is나 !is연산자 역시 사용 가능
// 그리고 어떤 조건값에도 맞지 않는 경우 실행할 else 문도 있다.
// ***** 다만 등호나 부등호의 사용은 불가능하다!!!!!!!!!
// 참고로 여러개의 여러개의 조건이 맞을 경우에도 먼저 부합되는 조건이 실행되는 점을 유의하자!!!!
/*
fun main() {
    println

}

fun doWhen(a: Any) {
    when(a) {
        1 -> println("정수 1입니다")
        "Dimo" -> println("디모의 코틀린 강좌입니다")
        is Long -> println("Long 타입 입니다")
        !is String -> println("String 타입이 아닙니다")
        else -> println("어떤 조건도 만족하지 않습니다")
    }

}
*/

// 그럼 main 함수에서 doWhen 함수에 다양한 값을 넣어 테스트 해보자.
/*
fun main() {
    doWhen(1)
    doWhen("Dimo")
    doWhen(12L)
    doWhen(3.14159)
    doWhen("Kotlin")

}

fun doWhen(a: Any) {
    when(a) {
        1 -> println("정수 1입니다")
        "Dimo" -> println("디모의 코틀린 강좌입니다")
        is Long -> println("Long 타입 입니다")
        !is String -> println("String 타입이 아닙니다")
        else -> println("어떤 조건도 만족하지 않습니다")
    }

}
*/

// 위의 식에서 when은--> when을 조건에 맞는 동작을 하는 조건문으로서 이용한 경우 인데
// when의 조건이 맞을 때 동작 대신 값을 반환하는 표현식(expressions)으로서의 역할을 하게 하려면 어떻게 해야할까?
// 바로 when의 조건으로 동작대신 "값"을 써주면 된다.
/*
fun main() {
    doWhen(1)
    doWhen("Dimo")
    doWhen(12L)
    doWhen(3.14159)
    doWhen("Kotlin")

}

fun doWhen(a: Any) {
    when(a) {
        1 -> "정수 1입니다"
        "Dimo" -> "디모의 코틀린 강좌입니다"
        is Long -> "Long 타입 입니다"
        !is String -> "String 타입이 아닙니다"
        else -> "어떤 조건도 만족하지 않습니다"
    }

}
*/
// 이렇게하면 when의 결과를 변수에 할당하거나 직접 값으로 사용할 수 있다.
/*
fun main() {
    doWhen(1)
    doWhen("Dimo")
    doWhen(12L)
    doWhen(3.14159)
    doWhen("Kotlin")

}

fun doWhen(a: Any) {
    var result = when(a) {
        1 -> "정수 1입니다"
        "Dimo" -> "디모의 코틀린 강좌입니다"
        is Long -> "Long 타입 입니다"
        !is String -> "String 타입이 아닙니다"
        else -> "어떤 조건도 만족하지 않습니다"
    }
    println (result)

}
*/
// ** var result = when(a){...}  println(result) when에서 결과를 변수에 받아 출력해보면 의도대로 동작한다.

// 프로그램은 조건에 따라 판단하여 수행시켜야하는 경우가 많다. 따라서 kotlin 에서도 조건문은 코드의 중요한 기반이 된다.
// >>> 그러므로 테스트 많이해보고 숙지해놔라!!!!!


//매개변수(媒介變數), 파라미터(parameter), 모수(母數)는 수학과 통계학에서 어떠한 시스템이나 함수의 특정한 성질을 나타내는 변수를 말한다. 일반적으로는 θ라고 표현되며, 다른 표시는 각각 독특한 뜻을 지닌다. 함수의 수치를 정해진 변역에서 구하거나 시스템의 반응을 결정할 때는 독립변수는 변하지만 매개변수는 일정하다. 다른 매개변수를 이용해 함수의 다른 수치를 다시 구하거나 시스템의 다른 반응을 볼 수도 있다.
//
//매개변수등식에서는 독립적 변수가 매개변수라고 일컬어진다.