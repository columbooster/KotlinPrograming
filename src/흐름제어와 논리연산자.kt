// kotlin 강좌 #7 흐름제어와 논리 연산자

// 먼저 코드의 흐름을 제어할 수 있는 키워드에 대해서 알아보자

// 키워드들 중 하나이 return은 함수를 배울때 이미 사용했듯이 '함수를 종료'하고 값을 '반환'하는 역할을 한다.

// 흐름을 제어할 수 있는 다른 키워드는 또 어떤것이 있을까?

// 바로 반복문에서 사용할 수 있는 break 와 continue가있다.

// 키워드 break는 반복문내의 구문이 실행되는 중간에 즉시 반복문을 '종료'하고 다음 구문으로 넘기는 역할
// 키워드 continue는 다음 반복조건으로 즉시 넘어가는 역할
// ex) break 활용 예시 i가 3이 되는 시점에 반복이 즉시 중단 되기 때문에 1과2가 찍힌후 정지된다.
/*
fun main() {
    for (i in 1..10) {
        if (i == 3) break
        println(i)
    }
}
*/

// ex) continue 활용 예시 . 이 코드는 i가 3이 되는 시점에 println을 지원하지 않고 바로 for문으로 돌아가 다음반복조건인 4로 진행되기 떄문에 3제외한 모든숫자가 찍힌다.
/*
fun main() {
    for(i in 1..10) {
        if(i==3) continue
        println(i)
    }
}
*/
// 여기까지는 기존의 언어들이랑 비슷한데 kotlin은 여기에 한가지 기능이 더 추가되어있다.
// 바로 다중반복문에서 break나 continue가 적용되는 반복문을 label(레이블)을 통해 지정할 수 있는 기능
// ex) i로 10번 반복하는 for 문 내에서 다시 j로 10번 반복하는 구조의 "다중 반복문"이 있다고 하자.
// 여기서 i가 1이고 j가 2면 모든 반복문을 종료해야한다고 해봅시다.
//   &&연산자  --->>  두 조건을 모두 만족해야하는 논리 연산자
// 고전적인 언어에서는 내부반복문을 체크하여 break를 하더라도 외부 반복문에서 또 다시 조건을 체크하여 모든 반복문을 수동으로 종료 했어야 했다.
// kotlin 에서는 외부 반복문에서 "레이블이름"과 "@기호"를 달고 break 문에서 @과 레이블 이름을 달아주면 레이블이 달린 반복문을 기준으로
// 즉시 break 를 시켜준다. * 레이블 이름은 원하는대로 설정해도 된다.  >> continue 에서도 마찬가지!!

/*
fun main() {
    loop@for(i in 1..10) {
        for(j in 1..10) {
            if (i == 1 && j == 2) break@loop
            println("i : $i, j : $j")
        }
    }
}
*/
// 참고로 "따옴표 안에서 변수를 출력"할 때는 변수명 앞에 달러$표기를 붙여주면 변수내용으로 대체되어 출력된다. ********

// --> 방금 해봤던 예제에서 사용된 논리연산자에 대해서 알아보자.

// 논리연산자( logical operators ) 는 논리값을 연산하여 새로운 논리값을 도출할 때 쓰는 연산자이다
// 논리연산자( logical operators)에는 &&(and기호를 두개쓰는) and 연산자, ||(바 기호를 두개쓰는) or 연산자, !(느낌표를 사용하는) not 연산자
// &&(and연산자)는 true && true => true ** and의 앞과 뒤에 있는 논리값이 둘다 true 일 때 결과값이 true 가 되는 연산자
// ||(or연산자)는 true || false => true ** || 앞 또는 뒤에 있는 논리값 중 하나라도 true이면 결과값이 true가 되는 연산자
// !(not연산자)는 !true => false , !false => true  ** 뒤에 붙는 값을 반전시키는 역할 참이면 거짓, 거짓이면 참
// ex)
/*
fun main() {
    println(true && false)
    println(true || false)
    println(!true)
    println(!false)
}
*/
// 지금은 boolean 리터럴 값으로만 수행하였지만 실제 사용시에는 "조건식과 조건식을 연산"하는 경우가 더 많다.
// ex) 변수 a와 b에 각각 6과 4를 할당하고 a와b를 각각 5와 비교하는 조건식을 and연산 해보자
// 앞에 있는 식은 true 뒤에 있는 식은 false 이기 때문에 결과값으로 false가 찍힌다.

fun main() {
    var a = 6
    var b = 4
    println(a>5 && b>5)
}

// 예제에서는 결과 값을 눈으로 보여주기 위해 println을 사용했지만 실제 비교연산은 흐름제어에서의 예시에서 봤듯이 조건문인 if 안에서 많이 쓰인다. if(i==1 && j==2) break
// 프로그램에서는 2개 이상의 조건식을 고려하여 분기해야하는 경우가 많이 생기기 때문이다.
// 흐름제어 및 논리연산자는 복잡한 조건에 따라 반복을 제어하고 분기를 실행해야하는 경우에 많이 쓰이므로 꼭 알아두자!!



