// kotlin 강좌 # 9 클래스의 생성자

// 인스턴스를 만드는 생성자의 이해

// class Person(var name:Sting, val birthYear:Int) --> 클래스 이름 옆에 괄호 했었던 속성들이 생성자이다.
// 이것은 클래스의 '속성'을 선언함과 동시에 '생성자'역시 선언하는 방법ㅂ이다.

// 생성자(constructor) --> 새로운 인스턴스를 만들기 위해 호출하는 특수한 함수. 생성자를 호출하면 클래스의 인스턴스를 만들어 반환 받을 수 있다.
// 생성자의 기능 ? 인스턴스의 속성을 초기화하는 기능 , 인스턴스 생성시 구문을 수행하는 기능

// 지난시간에는 인스턴스 생성시 구문을 수행하는 기능은 넣을 수 없었다. --> inin이라는 함수를 통해서 수행이 가능하다.
// init 함수는 패러미터나 반환형이 없는 특수한 함수 -> 생성자를 통해 인스턴스가 만들어질 때 호출되는 함수
// 지난 시간에 만들었던 Person 클래스에 init 함수만 추가해보자.
// 클래스 안에 init을 쓴 후 중괄호를 친 후 init이 호출되는지 여부를 확인하기 위해 속성들을 출력하는 println 구문을 넣어보자.

// 이 때, this는 인스턴스 자신의 속성이나 함수를 호출하기 위해 클래스 내부에서 사용되는 키워드라는 점을 기억하자!!


// main 함수에서 Person 인스턴스를 세 개 만들고 실행해보면 인스턴스 생성을 통해 init이 호출되어 세개의 인스턴스에넣은 속성들이 출력 된다.
/*
fun main() {
    var a = Person("박보영", 1990)
    var b = Person("전정국", 1997)
    var c = Person("장원영", 2004)

}

class Person (var name:String, val birthYear:Int) {
    init {
        println("${this.birthYear}년생 ${this.name}님이 생성되었습니다.")
    }

}
*/

// 그런데 이러한 생성자를 사용할 때 항상 모든속성을 '수동으로 초기화'하는 것이 '비효율적'인 경우도 있다.

// 예를들어, Person 클래스를 사용하여 100명의 사람이 가진 이름과 태어난 년도를 인스턴스로 만든다고 해보자.
// 그중 90명정도가 1997년생이라면? 당연히 1997년을 '기본값'으로 만들 수 있는 방법이 있다면 좋겠지?
// 이때는 클래스를 만들때 기본으로 선언하는 기본생성자 이외에 필요에 따라 추가적으로 선언하는 보조 생성자 라는 것을 만들면 된다
// 보조생성자 ( secondary constructor)는 기본생성자와 다른 형태의 생성자를 제공하여 인스턴스 생성시 편의를 제공하거나 추가적인 구문을 수행하는 기능을 제공하는 역학
// 그럼 보조 생성자를 만들어보자 >> 보조 생성자는 constructor 이라는 키워드를 사용한다.
// init 처럼 constructor 이라는 이름의 함수를 만들고 괄호 안에 패러미터를 추가한다.
// 여기서는 이름만 받는 생성자를 만들어보자.
// ** 중요한 점은 보조생성자를 만들 때는 ""반드시 기본 생성성자를 통해"" 속성을 초기화 해줘야한다.
// 보조 생성자가 기본 생성자를 호출하도록 하려면 콜론(:)을 붙인 후 this라는 키워드를 사용하고 기본생성자가 필요로하는 패러미터를 괄호안에 넣어주면 된다.
// 여기서는 '이름은 받은 그대로' 넘겨주고 년도는 1997년도로 고정하여 초기화하도록 해보자.
// 그 다음 중괄호 안에 보조 생성자가 수행되는지를 println을 통해 확인해보자.
// 이렇게 만들어진 보조생성자를 통해 인스턴스를 생성해보자. 이번엔 년도 없이 이름만 넣으면 되겠지?

fun main() {
    var a = Person("박보영", 1990)
    var b = Person("전정국", 1997)
    var c = Person("장원영", 2004)

    var d = Person("이루다")
    var e = Person("차은우")
    var f = Person("류수정")

}

class Person (var name:String, val birthYear:Int) {
    init {
        println("${this.birthYear}년생 ${this.name}님이 생성되었습니다.")
    }
    constructor(name: String) : this(name, 1997){
        println("보조 생성자가 사용되었습니다.")
    }

}

// 기본생성자로 만들었던 인스턴스 외에 보조생성자를 사용한 인스턴스 3개가 생성되는 것과 그 내용이 출력된다.

// 기본생성자와 보조생성자는 클래스를 사용하는 사람에게 다양한 방법으로 인스턴스를 생성하는 법을 제시함으로써 편의를 제공하는 기능임!!!