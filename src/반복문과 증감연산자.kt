// kotlin 강좌 # 6 반복문과 증감연산자

// 반복문은 크게 2가지 형태가 있다
// * 조건이 참인 경우 반복을 유지 ---> 조건형 반복문
// * 반복 범위를 정해 반복을 수행 ---> 범위형 반복문

// 조건형 반복문은 ( While, do...while ) 이 있다
// While문 부터 테스트 해보자
// 먼저 조건을 테스트 하기 위해 a라는 변수를 만들어 0을 넣어보자.
// 그리고 while을 쓴 뒤에 괄호 안에 a와5를 비교하는 조건식을 넣어보자.
// 그리고 이 조건식이 '참'인 경우에 반복할 println 구문과 그 안에 a에 1을 더해 줄 "증가 연산자"를 중괄호 안에 넣어보자
// ** 증가 연산자  ( increment operators ) --> 변수 앞이나 뒤에 플러스를 두개 붙여 사용하는 연산자 ex) ++a , a++ 로 변수의 값을 1증가 시켜주는 역할
// ** 감소 연산자 ( decrement operators ) --> 마이너스를 두개 붙여 ex) --a, a-- 값을 1 감소 시켜주는 역할
// --> 이 두개를 통칭하여 "증감 연산자 (increment & decrement operators) 라고 한다.
// ??? 앞에 붙이는 것과 뒤에 붙이는 것은 무슨 차이가 있을까?
// 앞에 붙일 경우 앞전,자리위 자를 써서 전위 연산자(prefix operators)라고 한다
// 전위 연산자(prefix operators)는 연산자가 포함된 구문에서 이미 증감된 수를 반영하여 연산이 진행되는 반면
// 후위 연산자(postfix operators)는 증가나 감소된 수를 해당 구문에서 사용하지 않고 "다음 구문"부터 사용한다는 차이가 있다.
/*
fun main() {

    var a = 0

    while (a < 5)

        println(a++)
}
*/
// --> 작성한 코드에서 while은 어떻게 반복될까? 1.먼저 while에 포함된 조건식이 참"(a<5)"인지 확인한다.
// 2. 참이라면 while에 따르는 구문" println(a++) "을 1회 수행한다.  --> a++ 후위연산자라서 화면에 출력된 후에 증가값이 반영된다.
// 3. 그 후 다시 while문으로 돌아와서 조건을 확인한다. 4. 그리고 while문이 거짓이 되는 순간 --> a가 5가 되는 순간!! 반복을 중단하고 다음 구문으로 넘어간다.
// 여기서는 반복시마다 "a가 1씩 증가" 되기 때문에 실행시켜보면 0,1,2,3,4가 찍히고 5에서 조건이 거짓이 되어 프로그램이 종료된다.
// 후위가 아닌 전위 연산자라면 어떻게 동작 할까?
// 전위 연산자는 해당 구문내에서 증가된 값을 즉시 반영하기 때문에 증가가 먼저 된 후 화면에 출력하게 된다.
/*
fun main() {

    var a = 0

    while (a<5)

        println(++a)
}
*/
// 따라서 실행해보면 1,2,3,4,5가 찍힌다.


// 그럼 다른 하나인 do...while문은 어떤 차이가 있을까?
/*
fun main() {

    var a = 0

    do {
        println(a++)
    } while (a < 5)

}
*/

// do...while 문은 while에 의해 조건을 체크하여 반복한다는 점은 같지만 최초 한 번은 "조건없이 do에서 구문을 실행(prinln(a++)"한 후
// while로 조건을 체크(a<5) 한다는 "선후관계에 차이"가 있을 뿐이다.
// 따라서 조건과 관계없이 반드시 "한번은 실행" 해야 한다면 do...while 문을 사용하는 것이 좋다.

//범위형 반복문  ( for )
// for의 사용법은 고전적인 언어들과는 사뭇 다른 편이다. -> 최신 언어들이 제공하고 있는 조금더 사람이 이해하기 쉬운 형태로 사용할 수 있다.
// 먼저 for 문을 쓰고 괄호안에 index로 사용할 변수명으로 i를 지정해보자. -> 이 때, 인덱스로 사용할 변수에는 var등을 붙이지 않아도 된다.
// 그 다음 0부터9까지 반복하게 할건데 in 쓰고 0..9라고 쓰면된다. --> i 가 0부터 9이내에서 동작한다는 의미다.
// 기본적으로 for 문은 값을 1씩 증가시키며 반복한다. ex) 0123456789
// 그리고 중괄호 안에 i의 변화값을 확인하기 위해서 print문으로 i값을 찍어보자.
// print는 println과 달리 줄을 떼지않고 '붙여서' 출력할 때 사용하는 함수이다.

/*
fun main() {

    for(i in 0..9)
        print(i)
}
*/
// 0 부터 9 까지 1 씩 증가하며 "인덱스 값을 출력"하고 종료 된다.
// 증가 값을 1이 아닌 다른 값으로 하려면? --->> 이 때는 단계를 뜻하는 "step"을 옵션으로 붙여주면 된다.

/*
fun main() {

    for(i in 0..9 step 3) {
        print(i)
    }
}
*/

// step 3을 붙인 후 다시 실행 시켜보면 0.3.6.9 로 3씩 증가한다.

// 증가가 아니라 감소하려면? 감소는 .. 대신에 downTo라는 키워드를 사용한다
/*
fun main() {

    for (i in 9 downTo 0 step 3) {
        print(i)
    }
}
*/
// for 문은 char 자료형(캐릭터 자료형)에도 사용할 수 있다.

fun main() {

    for (i in 'a'..'e') {
        print(i)
    }
}







