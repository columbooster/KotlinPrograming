// kotlin 강좌 # 14 고차함수와 람다함수

// 고차함수란 함수를 마치 클래스에서 만들어 낸 '인스턴스'처럼 취급하는 방법 인데
// 함수를 '패러미터'로 넘겨줄 수도 있고 '결과값으로 반환' 받을 수도 있는 방법이다.
// kotlin에서는 모든 함수를 고차함수로 사용 가능하다.
// 먼저 a라는 함수를 만들어 문자열을 패러미터로 받아보자. 그리고 패러미터로 받은 문자열 뒤에 '함수a'라고 출력해보자.
// 그리고 b 라는 함수를 만들 되 함수a를 고차함수 형식의 패러미터로 받을 수 있도록 해보자.
// 함수를 받을 패러미터의 이름은 function으로 하고 자료형은 a의 함수의 형식을 넘겨받을 수 있도록 해야하는데
// 함수의 형식은 어떻게 자료형으로 나타낼까?
// 괄호안에 함수가 받을 패러미터의 자료형을 나열하고 마이너스와 부들호로 화살표를 만든 뒤 함수의 반환형을 써주면 된다. (자료형,자료형,...)패러미터-> 자료형 (반환형)
// 이렇게 하면 기술한 형태와 같은 형식의 함수는 모두 패러미터로 받을 수 있다.
// 우리가 받아올 함수a는 문자열을 받고 반환형은 없는 함수 이므로 괄호안에 String을 써주고 반환형에는 값이 없다는 형식은 Unit을 써주면 된다.
// (String)->Unit (이것도 함수를 나타낸 자료형의 일종이다) 이 함수의 형식은 람다함수에도 사용되므로 꼭 기억해두자
// 그리고 함수b의 내용에는 받아온 함수인 function을 실행하되 문자열로"b가 호출한"이라는 값을 넘겨준다.

// main함수에서는 함수b를 호출하되 함수a를 패러미터로 넘겨줄텐데 고차함수 형태로 넘기려면 함수 이름앞에 콜론을 두개 붙여주면 된다. :: -> 일반 함수를 고차함수로 변경해주는 연산자
// main함수가 a함수를 b함수에 패러미터로 넘겼고, b함수는 받아온 a함수에 "b가 호출한"이라는 값을 넘겨서 호출하였다.
// 최종적으로 a라는 함수가 실행되면서 "b가 호출한 함수 a"라는 문자열이 출력된다.

/*
fun main() {

    b(::a)


}

fun a (str: String) {
    println("$str 함수 a")
}

fun b (function: (String)-> Unit) {
    function("b가 호출한")
}
*/
// 그런데 패러미터로 넘길 함수를 굳이 이름까지 붙여 따로 만들 필요가 있을까? 이 때는 함수를 람다식으로 표현하는 람다함수(lambda function)를 사용한다.
// 방금 만든 함수 a와 같은 형태를 람다 함수로 만들어보자.

// 람다함수는 일반 함수와 달리 '그 자체가 고차함수' 이기 때문에 별도의 연산자 없이도 변수에 담을 수 있다.
// 임시로 사용할 변수 c를 만들어보자
// 그리고 콜론 뒤에 아까 배웠던 함수의 형식을 써보자. (String)->Unit
// 일반적인 자료의 변수형을 쓰듯 val a : Int 그 자리에 함수의 형식을 쓴것이다. val a : (String) -> Unit
// 이제 실제 동작할 람다식 부분을 구현할 텐데 이퀄 뒤에 중괄호를 붙이고 패러미터로 받아온 문자열을 매칭해 줄 변수 이름을 써준다.
// val c : (String) -> Unit = { str }  * str은 String값으로 받아온 값을 람다함수 내에서 사용할 변수 이름
// val c : (String) -> Unit = { str: String }  ->원래는 콜론쓰고 자료형을 붙이는게 기본형태이지만
// 여기에서는 함수의 형식을 기술한 자료형에 이미 패러미터의 자료형이 기술되어 있으므로(String) 자료형이 자동으로 추론되므로 생략 해준다.
// 이제 이 패러미터로 동작시킬 구문을 기술할 차례인데 함수의 형식에서와 같이 화살표 형태를 쓴 후
// 패러미터로 받아온 문자열 뒤에 '람다함수'라고 출력해준다.
// 함수b에 람다함수c를 넘겨 실행해보자 ** 람다함수는 그 자체가 고차함수이기 때문에 연산자가 필요없다. b(c)
// 아까 실행했던것과 동일한 구조로 문자열이 출력된다.



fun main() {

    b(::a)

    val c : (String) -> Unit = { str -> println("$str 람다함수")}

    b(c)


}

fun a (str: String) {
    println("$str 함수 a")
}

fun b (function: (String)-> Unit) {
    function ("b가 호출한")
}


// 람다함수 역시 변수에 할당할 때는 이전에 배웠던 타입추론 기능을 이용하여 좀 더 축약하여 기술할 수 있다.
// 함수의 형식을 적지않고 바로 중괄호안에 직접 패러미터의 자료형만 써주면 패러미터와 리턴값을 자동으로 추론하여 이에 맞는 함수형식의 객체로 변수에 저장해준다.
// ex ) val c = {str: String -> println("$str 람다함수")}
//          c > 자료형을 기술하지 않음
//              str: String 람다식 안에만 패러미터의 자료형을 기술
// 코틀린추론 : 아 얘는 String을 하나 받지만 반환값은 없어보이는구만
// (String) -> Unit 자료형으로 저장됨


// 고차함수와 람다함수를 사용하면 이렇게 함수를 일종의 변수로 사용할 수 있다는 편의성도 있지만
// 이 후 배우게 될 컬렉션의 조작이나 스코프 함수의 사용에도 도움이 된다.

